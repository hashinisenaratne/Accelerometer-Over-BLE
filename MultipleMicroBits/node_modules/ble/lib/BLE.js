const StateJS = require('state.js');
StateJS.internalTransitionsTriggerCompletion = true;

/**
 * Definition for type : BLE
 **/
function BLE(name, root, BLE_test_var, BLE_ble_var, BLE_peripherals_var, debug) {

this.name = name;
this.root = root;
this.debug = debug;
this.ready = false;
//Children
this.forkID = 0;
this.forks = [];
//Attributes
this.BLE_test_var = BLE_test_var;
this.debug_BLE_test_var = BLE_test_var;
this.BLE_ble_var = BLE_ble_var;
this.debug_BLE_ble_var = BLE_ble_var;
this.BLE_peripherals_var = BLE_peripherals_var;
this.debug_BLE_peripherals_var = BLE_peripherals_var;
//callbacks for attributes
this.propertyListener = {};

//if (root === null || root === undefined) {//only the root can send message//callbacks for third-party listeners
this.stateChangeOnBLEListeners = [];
this.discoverOnBLEListeners = [];
this.scanStartOnBLEListeners = [];
this.scanStopOnBLEListeners = [];
this.stateChangeOnBLEInternalListeners = [];
this.discoverOnBLEInternalListeners = [];
this.scanStartOnBLEInternalListeners = [];
this.scanStopOnBLEInternalListeners = [];
//}
build.call(this, name, root);
};
//CEP dispatch functions
function cepDispatch(message) {
};
function root(component) {
var self = component;
var root = self.root;
while (root !== null && root !== undefined) {
self = root;
root = self.root;
}
return self;
}
//ThingML-defined functions
function initialize() {
if( !((this.BLE_test_var))) {
this.BLE_ble_var =  require('noble');	   	
	   	
	   	this.BLE_ble_var.on('stateChange', function(state) {
	   	console.log('stateChange');
//notify listeners of that attribute
if (this.propertyListener['ble'] !== undefined) {
bleListenersSize = this.propertyListener['ble'].length;
for (var _i = 0; _i < bleListenersSize; _i++) {
this.propertyListener['ble'][_i](this.BLE_ble_var);
}
}
setImmediate(sendStateChangeOnBLEInternal.bind(this, state));

  		console.log('sent state ' +state)	
		});
this.BLE_ble_var.on('discover', function(peripheral) {
		if(peripheral.advertisement == null || peripheral.advertisement.serviceData == null|| peripheral.advertisement.serviceData.length == 0){
			return;
		}
		var perStr = JSON.stringify(peripheral, function( key, value) { 
  			if( key == '_noble') { return value.id;}
  			else {return value;}
			});
setImmediate(sendDiscoverOnBLEInternal.bind(this, perStr));

  		//console.log('sent state ' +perStr)	
		});

}
};

//Internal functions
function sendStateChangeOnBLE(st) {
const self = root(this);
//notify listeners
const arrayLength = self.stateChangeOnBLEListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.stateChangeOnBLEListeners[_i](st);
}
};

function sendDiscoverOnBLE(peripheral) {
const self = root(this);
//notify listeners
const arrayLength = self.discoverOnBLEListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.discoverOnBLEListeners[_i](peripheral);
}
};

function sendScanStartOnBLE() {
const self = root(this);
//notify listeners
const arrayLength = self.scanStartOnBLEListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.scanStartOnBLEListeners[_i]();
}
};

function sendScanStopOnBLE() {
const self = root(this);
//notify listeners
const arrayLength = self.scanStopOnBLEListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.scanStopOnBLEListeners[_i]();
}
};

function sendStateChangeOnBLEInternal(st) {
const self = root(this);
//notify listeners
const arrayLength = self.stateChangeOnBLEInternalListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.stateChangeOnBLEInternalListeners[_i](st);
}
};

function sendDiscoverOnBLEInternal(peripheral) {
const self = root(this);
//notify listeners
const arrayLength = self.discoverOnBLEInternalListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.discoverOnBLEInternalListeners[_i](peripheral);
}
};

function sendScanStartOnBLEInternal() {
const self = root(this);
//notify listeners
const arrayLength = self.scanStartOnBLEInternalListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.scanStartOnBLEInternalListeners[_i]();
}
};

function sendScanStopOnBLEInternal() {
const self = root(this);
//notify listeners
const arrayLength = self.scanStopOnBLEInternalListeners.length;
for (var _i = 0; _i < arrayLength; _i++) {
self.scanStopOnBLEInternalListeners[_i]();
}
};

//State machine (states and regions)
function build(session, root) {//optional session name and root instance to fork a new session
if (root === null || root == undefined) {//building root component
this.statemachine = new StateJS.StateMachine("BLEImpl");
this._initial_BLE_BLEImpl = new StateJS.PseudoState("_initial", this.statemachine, StateJS.PseudoStateKind.Initial);
var BLE_BLEImpl_Idle = new StateJS.State("Idle", this.statemachine).entry(function () {
initialize.call(this);
}.bind(this))

;
var BLE_BLEImpl_Scanning = new StateJS.State("Scanning", this.statemachine);
var BLE_BLEImpl_End = new StateJS.State("End", this.statemachine);
this._initial_BLE_BLEImpl.to(BLE_BLEImpl_Idle);
BLE_BLEImpl_Scanning.to(BLE_BLEImpl_End).when(function (stopScanning) {return stopScanning._port === "BLE" && stopScanning._msg === "stopScanning";}.bind(this)).effect(function (stopScanning) {
this.BLE_ble_var.stopScanning();
}.bind(this));
BLE_BLEImpl_Idle.to(BLE_BLEImpl_Scanning).when(function (stateChange) {return stateChange._port === "BLEInternalRec" && stateChange._msg === "stateChange" && stateChange.st == "poweredOn";}.bind(this)).effect(function (stateChange) {
console.log(("Start scanning received"));
this.BLE_ble_var.startScanning([], true);
}.bind(this));
BLE_BLEImpl_Idle.to(BLE_BLEImpl_End).when(function (stateChange) {return stateChange._port === "BLEInternalRec" && stateChange._msg === "stateChange" &&  !((stateChange.st == "poweredOn"));}.bind(this)).effect(function (stateChange) {
console.log(("Stop scanning"));
this.BLE_ble_var.stopScanning();
}.bind(this));
BLE_BLEImpl_Scanning.to(null).when(function (discover) {return discover._port === "BLEInternalRec" && discover._msg === "discover";}.bind(this)).effect(function (discover) {
setImmediate(sendDiscoverOnBLE.bind(this, discover.peripheral));
}.bind(this));
}
};
//Public API for lifecycle management
BLE.prototype._stop = function() {
this.forks.forEach(function (fork) {
fork._stop();
fork._delete();
});
if (this.root !== null && this.root !== undefined) {
const forkLength = this.root.forks.length;
var idFork = 0;for (var _i = 0; _i < forkLength; _i++) {
if (this.root.forks[_i] === this) {
idFork = _i
}
}
this.root.forks.splice(idFork, 1);
}
this.root = null;
this.forks = [];
this.ready = false;
};

BLE.prototype._delete = function() {
this.statemachine = null;
this.BLEImpl_instance = null;
};

//Public API for third parties
BLE.prototype._init = function() {
this.BLEImpl_instance = new StateJS.StateMachineInstance("BLEImpl_instance");
StateJS.initialise(this.statemachine, this.BLEImpl_instance );
this.ready = true;
};

BLE.prototype._receive = function(msg) {//msg = {_port:myPort, _msg:myMessage, paramN=paramN, ...}
if(this.ready){
cepDispatch.call(this, msg);
StateJS.evaluate(this.statemachine, this.BLEImpl_instance, msg);
this.forks.forEach(function(fork){
fork._receive(msg);
});
}};
BLE.prototype.onPropertyChange = function (property, callback) {
if (this.propertyListener[property] === undefined) {this.propertyListener[property] = [];}
this.propertyListener[property].push(callback);
};

BLE.prototype.receiveconnectOnBLE = function(peripheralId) {
this._receive({_port:"BLE", _msg:"connect", peripheralId:peripheralId});
};

BLE.prototype.receivedisconnectOnBLE = function(peripheralId) {
this._receive({_port:"BLE", _msg:"disconnect", peripheralId:peripheralId});
};

BLE.prototype.receivestartScanningOnBLE = function() {
this._receive({_port:"BLE", _msg:"startScanning"});
};

BLE.prototype.receivestopScanningOnBLE = function() {
this._receive({_port:"BLE", _msg:"stopScanning"});
};

BLE.prototype.receivediscoverServicesOnBLE = function(peripheralId) {
this._receive({_port:"BLE", _msg:"discoverServices", peripheralId:peripheralId});
};

BLE.prototype.receivestateChangeOnBLEInternalRec = function(st) {
this._receive({_port:"BLEInternalRec", _msg:"stateChange", st:st});
};

BLE.prototype.receivediscoverOnBLEInternalRec = function(peripheral) {
this._receive({_port:"BLEInternalRec", _msg:"discover", peripheral:peripheral});
};

BLE.prototype.receivescanStartOnBLEInternalRec = function() {
this._receive({_port:"BLEInternalRec", _msg:"scanStart"});
};

BLE.prototype.receivescanStopOnBLEInternalRec = function() {
this._receive({_port:"BLEInternalRec", _msg:"scanStop"});
};

BLE.prototype.toString = function() {
var result = 'instance ' + this.name + ':' + this.constructor.name + '\n';
result += '\n\ttest = ' + this.BLE_test_var;
result += '\n\tble = ' + this.BLE_ble_var;
result += '\n\tperipherals = ' + this.BLE_peripherals_var;
result += '';
return result;
};
module.exports = BLE;
